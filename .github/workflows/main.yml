name: Applications Deployment

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'mongo/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'mongo/**'
  workflow_dispatch:
  workflow_run:
    workflows: ["Terraform IaC Deployment"]
    types:
      - completed
    branches: [ main, develop ]

jobs:
  check_infra:
    name: 'Check Infrastructure Status'
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.get_ec2_ip.outputs.ec2_ip }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate version tag
        id: get_version
        run: |
          # Obtener el package.json version y combinar con el SHA corto de git
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          VERSION="${SHORT_SHA}"
          echo "Version: $VERSION"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
          
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Get EC2 IP
        id: get_ec2_ip
        working-directory: ./terraform
        run: |
          EC2_IP=$(terraform output -raw instance_public_ip 2>/dev/null || echo "")
          if [ -z "$EC2_IP" ]; then
            echo "Infrastructure is not ready yet."
            exit 1
          fi
          echo "EC2 instance is available at: $EC2_IP"
          echo "ec2_ip=${EC2_IP}" >> $GITHUB_OUTPUT

  build_and_test_backend:
    name: 'Build and Test Backend'
    needs: check_infra
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ needs.check_infra.outputs.version }}-back
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest-back


  build_and_test_frontend:
    name: 'Build and Test Frontend'
    needs: check_infra
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ needs.check_infra.outputs.version }}-front
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest-front
  build_mongo:
    name: 'Build and Test mongo'
    needs: check_infra
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mongo

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: docker/build-push-action@v5
        with:
          context: ./mongo
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:${{ needs.check_infra.outputs.version }}-db
            ${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}:latest-db
  deploy:
    name: 'Deploy to EC2'
    needs: [check_infra, build_and_test_backend, build_and_test_frontend, build_mongo]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ needs.check_infra.outputs.ec2_ip }} >> ~/.ssh/known_hosts

      - name: Copy compose file to EC2
        run: |
          pwd  # Ver el directorio actual
          ls -la 
          scp -C compose.yml ec2-user@${{ needs.check_infra.outputs.ec2_ip }}:~/

      - name: Deploy applications
        run: |
          ssh ec2-user@${{ needs.check_infra.outputs.ec2_ip }} '
            #listar elementos copiados
            ls -la
            # Preparar variables para compose
            export REGISTRY=${{ secrets.DOCKER_USERNAME }}
            export REPONAME=${{ github.event.repository.name }}
            export VERSION=${{ needs.check_infra.outputs.version }}
            export CORS=http://${{ needs.check_infra.outputs.ec2_ip}}:5173
            export API=http://${{ needs.check_infra.outputs.ec2_ip}}:3333

            echo "$REGISTRY, $REPONAME, $VERSION, $CORS, $API"
            
            # Modificar compose.yml para usar las im√°genes de Docker Hub
            sed -i "s/\${VERSION_FRONT:-[^}]*}/${{ needs.check_infra.outputs.version }}-front/g" compose.yml
            sed -i "s/\${VERSION_BACK:-[^}]*}/${{ needs.check_infra.outputs.version }}-back/g" compose.yml
            sed -i "s/\${VERSION_DB:-[^}]*}/${{ needs.check_infra.outputs.version }}-db/g" compose.yml
            
            cat compose.yml
            
            # Start with Docker Compose
            docker compose -f compose.yml up -d
            
            # Verificar status
            docker compose ps
          '